- Add a --exclude option to every complex query, similar to the -s option for tree --leak.  This
  would be to not show output for things, but not make them actually part of the query.

  For example: "wil.py interface sock.o --exclude listen.o"

- Add support for showing where header files included in the queries.  Already extracting the
  necessary data from the collect phase.

- Convert from source or header to object file in the necessary queries.  For example, this would
  mean that a user could use sock.cpp to query for the leaks or interface of sock.o.  Again, the
  data is already in the graph from the collect phase.

Ingestion:
- Do not require the link phase to ingest the symbols, only compilation

- Create a top level command that does both phases of data generation

- Integrate with SCons by reading the "Node" object.  The advantage is two fold:
  - The "Node" object has more granularity about the dependency type (implicit, explicit, source)
  - A willitlink plugin can be added to site_scons that handles both LIBDEPS and the other kind of
    dependencies.  Currently they are separate



-- Notes On Overall Docs Project --

Current Components:

module_data - Documentation on MongoDB modules + Symbol information
willitlink - Helpers to extract and view symbol information + a cli to access it
mongowtf - Helper to read documentation from module_data for a given file
project_browser - Helper that generates a README tree from the project data

Plan to reorganize:

1. Think about differences between willitlink cli and mongowtf cli.

2. Add githashes to version everything.
    - mongo version to willitlink data.
    - mongo version and data version to readme generator.
    - Other necessary version info?

3. Finish the docs and generate them for 2.6.1.

4. Reorganize project:

* willitlink - Data extractor, api, and cli
* mongo_source_docs - Utilities and documentation for browsing MongoDB source
* mongo_source_docs/data - module_data
* mongo_source_docs/mongowtf - CLI docs viewer
* mongo_source_docs/readme_viewer - project_browser.  Tell people about the offline github markdown viewer so they can view the README tree that they generate.
* mongo_source_docs/docs_infrastructure - docs generator
* mongo_source_docs/utilities - schema utilities
