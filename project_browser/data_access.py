import os
from jsonschema import validate

# Library to read and write yaml files as OrderedDicts
import yaml_ordered

from willitlink.base.graph import MultiGraph

# This file should be the way to interact with all external files used and generated by this
# project.
#
# Current sources are (relative to the base directory passed into the functions below):
PROJECT_STRUCTURE_FILENAME = "modules.yaml" # human generated modules structure
WILLITLINK_DATA_DIRECTORY = "willitlink-data" # data generated by willitlink

MODULES_SCHEMA_FILE = "schema.yaml"
default_cwd = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))
schema_file_name = os.path.join(default_cwd, MODULES_SCHEMA_FILE)

def read_yaml_file(filename):
    return yaml_ordered.load(open(filename))

def write_yaml_file(filename, output_dict):
    with open(filename, 'w') as f:
        f.write(yaml_ordered.dump(output_dict, indent=4, default_flow_style=False))



def validate_project_structure_file_schema(project_data_directory):
    project_structure = read_yaml_file(os.path.join(project_data_directory, PROJECT_STRUCTURE_FILENAME))
    project_schema = read_yaml_file(schema_file_name)
    return validate(project_structure, project_schema)



def read_project_structure_file(project_data_directory):
    return read_yaml_file(os.path.join(project_data_directory, PROJECT_STRUCTURE_FILENAME))

def write_project_structure_file(project_data_directory, project_structure):
    write_yaml_file(os.path.join(project_data_directory, PROJECT_STRUCTURE_FILENAME), project_structure)



def get_willitlink_data_directory(project_data_directory):
    return os.path.join(project_data_directory, WILLITLINK_DATA_DIRECTORY)

def load_willitlink_graph(project_data_directory):
    return MultiGraph(timers=False).load(get_willitlink_data_directory(project_data_directory))
