import yaml
import os
import json

from willitlink.base.graph import MultiGraph

# This file should be the way to interact with all external files used and generated by this
# project.
#
# XXX: A lot of these functions generate unneeded data and should go away.
#
# Current sources are (relative to the base directory passed into the functions below):
PROJECT_STRUCTURE_FILENAME = "modules.yaml" # human generated modules structure
WILLITLINK_DATA_DIRECTORY = "willitlink-data" # data generated by willitlink
PROCESSED_PROJECT_STRUCTURE_FILENAME = "modules_processed.yaml" # merged version of the two data sources above


def read_yaml_file(filename):
    return yaml.load(open(filename))

def write_yaml_file(filename, output_dict):
    with open(filename, 'w') as f:
        f.write(yaml.dump(output_dict, indent=4, default_flow_style=False))



def read_project_structure_file(project_data_directory):
    return read_yaml_file(os.path.join(project_data_directory, PROJECT_STRUCTURE_FILENAME))

# TODO: Actually preserve the ordering as I dump the YAML file.  See
# http://stackoverflow.com/questions/8651095/controlling-yaml-serialization-order-in-python
def write_project_structure_file(project_data_directory, project_structure):
    write_yaml_file(os.path.join(project_data_directory, PROJECT_STRUCTURE_FILENAME), project_structure)



def read_processed_project_structure_file(project_data_directory):
    return read_yaml_file(os.path.join(project_data_directory, PROCESSED_PROJECT_STRUCTURE_FILENAME))

# TODO: Actually preserve the ordering as I dump the YAML file.  See
# http://stackoverflow.com/questions/8651095/controlling-yaml-serialization-order-in-python
def write_processed_project_structure_file(project_data_directory, project_structure):
    write_yaml_file(os.path.join(project_data_directory, PROCESSED_PROJECT_STRUCTURE_FILENAME), project_structure)



def get_willitlink_data_directory(project_data_directory):
    return os.path.join(project_data_directory, WILLITLINK_DATA_DIRECTORY)

def load_willitlink_graph(project_data_directory):
    return MultiGraph(timers=False).load(get_willitlink_data_directory(project_data_directory))
